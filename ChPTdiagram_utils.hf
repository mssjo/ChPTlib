#ifndef `CHPTDIAGRAMUTILSHF'
#define CHPTDIAGRAMUTILSHF

* Require parameters to be passed to FORM
#procedure require(PARAM)
    #ifndef ``PARAM''
        #message[require]~~~ ERROR: parameter `PARAM' must be defined
        #terminate 1
    #endif
#endprocedure
#procedure default(PARAM,DEFAULT)
    #ifndef ``PARAM''
        #message[default]~~~ `PARAM' <- `DEFAULT'
    #endif
#endprocedure
#procedure requireval(PARAM,VAL)
    #call require(`PARAM')
    #if ``PARAM'' != `VAL'
        #message[requireval]~~~ ERROR: parameter `PARAM' must have value `VAL'
        #terminate 1
    #endif
#endprocedure
#procedure requirevals(PARAM,VALS)
    #call require(`PARAM')
    #do VAL={``VALS''}
        #if ``PARAM'' == `VAL'
            #define REQUIREVALSATISFIED
            #breakdo
        #endif
    #enddo
    #ifndef `REQUIREVALSATISFIED'
        #message[requirevals]~~~ ERROR: parameter `PARAM' must have one of the values ``VALS''
        #terminate 1
    #endif
#endprocedure

* With MUTEX set to a list of variable names, this ensures that those are
* mutually exclusive (at most one defined)
#procedure mutex(VARS)
    #define N "0"
    #do VAR={``VARS''}
        #ifdef ``VAR''
            #message[mutex]~~~ `VAR' defined
            #redefine N "{`N'+1}"
        #endif
    #enddo
    #if `N'>1
        #message[mutex]~~~ ERROR: variables ``VARS'' are mutually exclusive
        #terminate
    #endif
#endprocedure

* Storing and retrieving expressions
* (convenience wrapper around the builtins)
#procedure store(NAME)
    #include- names.hf
    #create <`SAVENAME'_restore.hf>
*     #create <`SAVENAME'_restore_tagged.hf>
    #create <`SAVENAME'_sum.hf>
*     #create <`SAVENAME'_sum_tagged.hf>
    #create <`SAVENAME'_tags.hf>
    #do EXPR={`ACTIVEEXPRNAMES_'}
        #message[save]~~~ `EXPR' -> `SAVENAME'.sav
        #write <`SAVENAME'_restore.hf> "global `EXPR'x = `EXPR';"
*         #write <`SAVENAME'_restore_tagged.hf> "global `EXPR'x = tag`EXPR'*`EXPR';"
        #write <`SAVENAME'_sum.hf> " + `EXPR'"
        #write <`SAVENAME'_sum_tagged.hf> " + tag`EXPR'*`EXPR'"
*         #write <`SAVENAME'_tags.hf> " ,tag`EXPR'"
    #enddo
    #message[save]~~~ Restoration to active status -> `SAVENAME'_restore.hf
    #message[save]~~~ Sum of saved expressions -> `SAVENAME'_sum.hf
*     #message[save]~~~ Tagged versions -> `SAVENAME'_tags.hf etc.
    .store
    save `SAVENAME'.sav;
#endprocedure
#procedure load(NAME)
    #include- names.hf
    #message[load]~~~ `SAVENAME'.sav
*     #ifdef `TAG'
*         symbols
*             #include- `SAVENAME'_tags.hf
*             ;
*     #endif
    load `SAVENAME'.sav;
#endprocedure
#procedure restore(NAME)
    #call load(`NAME')
    #include- names.hf
    #message[restore]~~~ Restoring `NAME' to active expressions
    #message[restore]~~~ ("x" appended to names)
*     #ifdef `TAG'
*         #include+ `SAVENAME'_restore_tagged.hf
*     #else
        #include+ `SAVENAME'_restore.hf
*     #endif
#endprocedure
#procedure getsum(NAME)
    #include- names.hf
    #message[getsum]~~~ Summing `NAME' as a right-hand side
*     #ifdef `TAG'
*         #include+ `SAVENAME'_sum_tagged.hf
*     #else
        #include+ `SAVENAME'_sum.hf
*     #endif
#endprocedure


* For conditional repetition
#define INITREPEAT "if(count(repeat,1)==0) multiply repeat(0);"
#define SETREPEAT "id repeat(0) = repeat(1);"
#define UNSETREPEAT "id repeat(1) = repeat(0);"
#define IFREPEAT "id repeat(0) = 1; if(match(repeat(1))); id repeat(1) = 1;"

* For conversion of ORDER to NORDER via `NORDER`ORDER''
#define NORDER2 "LO"
#define NORDER4 "NLO"
#define NORDER6 "NNLO"
#define NORDER8 "N3LO"


#endif
