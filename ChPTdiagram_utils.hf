#ifndef `CHPTDIAGRAMUTILSHF'
#define CHPTDIAGRAMUTILSHF

* Require parameters to be passed to FORM
#procedure require(PARAM)
    #ifndef ``PARAM''
        #message[require]~~~ ERROR: parameter `PARAM' must be defined
        #terminate 1
    #endif
#endprocedure
#procedure requireval(PARAM,VAL)
    #call require(`PARAM')
    #if ``PARAM'' != `VAL'
        #message[requireval]~~~ ERROR: parameter `PARAM' must have value `VAL'
        #terminate 1
    #endif
#endprocedure
#procedure requirevals(PARAM,VALS)
    #call require(`PARAM')
    #do VAL={``VALS''}
        #if ``PARAM'' == `VAL'
            #define REQUIREVALSATISFIED
            #breakdo
        #endif
    #enddo
    #ifndef `REQUIREVALSATISFIED'
        #message[requirevals]~~~ ERROR: parameter `PARAM' must have one of the values ``VALS''
        #terminate 1
    #endif
#endprocedure

* With MUTEX set to a list of variable names, this ensures that those are
* mutually exclusive (at most one defined)
#procedure mutex(VARS)
    #define N "0"
    #do VAR={``VARS''}
        #ifdef ``VAR''
            #message[mutex]~~~ `VAR' defined
            #redefine N "{`N'+1}"
        #endif
    #enddo
    #if `N'>1
        #message[mutex]~~~ ERROR: variables ``VARS'' are mutually exclusive
        #terminate
    #endif
#endprocedure

* Saving and loading expressions
* Not using .store-save-load since it is rather clumsy
#procedure save(NAME)
    #include- names.hf
    #create <`SAVENAME'`SAVEEXT'>
    #write <`SAVENAME'`SAVEEXT'> "#message[load]~~~ Loading `SAVENAME'`SAVEEXT'"
    #write <`SAVENAME'`SAVEEXT'> "#message[load]~~~ Saved by: `NAME_'"
    #write <`SAVENAME'`SAVEEXT'> "#message[load]~~~ Saved on: `DATE_'"
    #write <`SAVENAME'`SAVEEXT'> "#message[load]~~~ FORMOPTS: `FORMOPTS'"
    #do EXPR={`ACTIVEEXPRNAMES_'}
        #message[store]~~~ `EXPR' -> `SAVENAME'`SAVEEXT'
        #write <`SAVENAME'`SAVEEXT'> "#call loadprefix(`EXPR',`SAVENAME'`SAVEEXT')"
        #write <`SAVENAME'`SAVEEXT'> "     (%E)",`EXPR'
    #enddo
#endprocedure
#procedure load(NAME)
    #include- names.hf
    #include- `SAVENAME'`SAVEEXT'
        ;
#endprocedure
#procedure loadsum(NAME)
    #include- names.hf
    #message[loadsum]~~~ `NAME' <- sum(`SAVENAME')
    #define LOADMODExSUM
    global `NAME' =
        #include- `SAVENAME'`SAVEEXT'
        ;
#endprocedure
#procedure loadtagged(NAME)
    #define LOADMODExTAG
    #message[loadtagged]~~~ Tagging individual loaded expressions
    #call loadsum(`NAME')
#endprocedure
#procedure loadprefix(NAME,FILE)
    #message[load]~~~ `NAME' <- `FILE'
    #ifdef `LOADMODExSUM'
        +
    #else
        ; global `NAME' =
    #endif
    #ifdef `LOADMODExTAG'
        tag`NAME' *
    #endif
#endprocedure


* For conditional repetition
#define INITREPEAT "if(count(repeat,1)==0) multiply repeat(0);"
#define SETREPEAT "id repeat(0) = repeat(1);"
#define UNSETREPEAT "id repeat(1) = repeat(0);"
#define IFREPEAT "id repeat(0) = 1; if(match(repeat(1))); id repeat(1) = 1;"

* For conversion of ORDER to NORDER via `NORDER`ORDER''
#define NORDER2 "LO"
#define NORDER4 "NLO"
#define NORDER6 "NNLO"
#define NORDER8 "N3LO"
#define NORDER10 "NkLO"

* Number of loops allowed at a particular power counting order
#define NLOOP(N) "((`~N'/2)-1)"

#endif
