#procedure renormalize(ORD,MAXEPS)

    .sort
    symbols [d],[d-1],[d-2],[d-3],[d-4];
    symbols [(cmu)^(d-4)], Lambda, ctil;
    #ifdef `PMCONV'
        cfunction C;
    #endif
    #ifdef `HNCONV'
        symbol [Gam(1+eps)];
        cfunction C;
    #endif

    #do N=2,8,2
        #if `ORD' == `NORDER`N''
            #redefine ORD "`N'"
            #breakdo
        #endif
    #enddo

    #if (isdefined(NORENORM)==0)&&(`ORD'<=`ORDER')
        #ifdef `SQED'
            id delA(4) = e^2/3 * i_*kappa*[expCtad0eps] / eps;
            id delEE(4) = 2*delE(4) - i_*delZ(4);
        #else
            #switch `ORD'
                #case 2
                    #break
                #case 4
                    #include- ChPTdiagram_p4renorm.hf
                    #break
                #case 6
                    #include- ChPTdiagram_p6renorm.hf
                    #break
                #case 8
                    #include- ChPTdiagram_p8renorm.hf
                    #break
                #default
                    #message[renorm]~~~ ERROR: order p^`ORD' not implemented
                    #terminate
            #endswitch
        #endif
    #endif

    #if isdefined(PMCONV)
        id [(cmu)^(d-4)]^m? = C(eps,mu)^m * sum_(n,0,`MAXEPS', (m * eps)^n * invfac_(n));
    #elseif isdefined(HNCONV)
        id [(cmu)^(d-4)]^m? = C(eps,mp2)^m * sum_(n,0,`MAXEPS', (m * eps * (L + 1 - gammaE))^n * invfac_(n)) / [Gam(1+eps)];
    #else
        id [(cmu)^(d-4)]^m? = sum_(n,0,`MAXEPS', (m * eps * ctil)^n * invfac_(n));
    #endif
    id Lambda = kappa / [d-4];

    #ifdef `QRENORM'
        #do L={``NORDER`ORD''LECSBARE'}
            id `L'r = kappa^{(`ORD'-2)/2} * `L'q;
        #enddo
    #endif

    #call expandD(`MAXEPS')

    .sort:>>renormalize `ORDER'<<;
#endprocedure

#procedure expandD(MAXEPS)

    id pi^2 = 1/(16*kappa);
    id 1/pi^2 = 16*kappa;

    id [d] = 4 - 2*eps;
    id [d-1] = 3 - 2*eps;
    id [d-2] = 2 - 2*eps;
    id [d-3] = 1 - 2*eps;
    id [d-4] =   - 2*eps;
    id 1/[d-4] = 1/(-2*eps);
    id 1/[d-3] = sum_(n,0,`MAXEPS', (2*eps)^n);
    id 1/[d-2] = 1/2 * sum_(n,0,`MAXEPS', eps^n );
    id 1/[d-1] = 1/3 * sum_(n,0,`MAXEPS', (2/3 * eps)^n );
    id 1/[d] = 1/4 * sum_(n,0,`MAXEPS', (eps/2)^n);

#endprocedure
