
* The ChPT lagrangian at NLO (order p^4)

#procedure p4term(IN,I3,I2)
    #call pXterm(`IN',L,`I3',L,`I2',l)
#endprocedure
#procedure p4cterm(IN,I3,I2)
    #call pXterm(`IN',H,`I3',H,`I2',h)
#endprocedure

* Note how pXterm allows inclusion of the normalization factors for Nf=2
#call p4term(0,X,X)
                        tr(Udag(mu), U(nu), Udag(mu), U(nu))
#call p4term(1,1,1/4)
                        tr(Udag(mu), U(mu)) * tr(Udag(nu), U(nu))
#call p4term(2,2,2/4)
                        tr(Udag(mu), U(nu)) * tr(Udag(mu), U(nu))
#call p4term(3,3,X)
                        tr(Udag(mu), U(mu), Udag(nu), U(nu))
#call p4term(4,4,X)
                        tr(Udag(mu), U(mu)) * (tr(Udag, chi) + tr(chidag, U))
#call p4term(5,5,X)
                        (tr(Udag(mu), U(mu), Udag, chi) + tr(Udag(mu), U(mu), chidag, U))
#call p4term(6,6,3/16)
                        (tr(Udag, chi) + tr(chidag, U))^2
#call p4term(7,7,7/-16)
                        (tr(Udag, chi) - tr(chidag, U))^2
#call p4term(8,8,X)
                        (tr(chidag, U, chidag, U) + tr(Udag, chi, Udag, chi))
#call p4term(9,9,6/-2)
                        (-i_*(tr(FR(mu,nu), U(mu), Udag(nu)) + tr(FL(mu,nu), Udag(mu), U(nu))))
#call p4term(10,10,5)
                        tr(Udag, FR(mu,nu), U, FL(mu,nu))
#call p4cterm(1,1,2)
                        (tr(FR(mu,nu), FR(mu,nu)) + tr(FL(mu,nu), FL(mu,nu)))
#call p4cterm(2,2,1)
                        tr(chidag, chi)
#call p4cterm(X,X,3)
                        (  (tr(chi, Udag) + tr(U, chidag))^2 + (tr(chi, Udag) - tr(U, chidag))^2 - 2*(tr(chi, Udag, chi, Udag) + tr(U, chidag, U, chidag)))


#if (`NF' == 2)
    ;* Account for how Gasser & Leutwyler originally wrote things weirdly
    id h1 = (h1+h3)/4;
    id h3 = (h1-h3)/16;
#endif

* #ifdef `NF'
*     #if `NF'==2
*         #define USEGL
*     #endif
* #endif
*
* #ifdef `USEGL'
* *     Gasser-Leutwyler form in modernized notation following Scherer & Schindler
* *     TODO: check normalization
*     + l1/4    * tr(Udag(mu), U(mu)) * tr(Udag(nu), U(nu))
*     + l2/4    * tr(Udag(mu), U(nu)) * tr(Udag(mu), U(nu))
*     + l3/16   * (tr(Udag, chi) + tr(chidag, U))^2
*     + l4/4    * (tr(U(mu), chidag(mu)) + tr(Udag(mu), chi(mu)))
*     + l5      * (tr(FR(mu,nu), U, FL(mu,nu), Udag)
* *                     - 1/2*(tr(FL(mu,nu), FL(mu,nu)) + tr(FR(mu,nu), FR(mu,nu)))
*                     )
*     + i_*l6/2 * (tr(FR(mu,nu), U(mu), Udag(nu)) + tr(FL(mu,nu), Udag(mu), U(nu)))
*     - l7/16   * (tr(chi, Udag) - tr(U, chidag))^2
*     + (h1+h3)/4 * tr(chi, chidag)
*     + (h1-h3)/16 * (  (tr(chi, Udag) + tr(U, chidag))^2
*                     + (tr(chi, Udag) - tr(U, chidag))^2
*                     - 2*(tr(chi, Udag, chi, Udag) + tr(U, chidag, U, chidag)))
*     - 2*h2 * (tr(FL(mu,nu), FL(mu,nu)) + tr(FR(mu,nu), FR(mu,nu)))
* #else
*
* *** First building block version
*     + L0 * tr(Udag(mu), U(nu), Udag(mu), U(nu))
*     + L1 * tr(Udag(mu), U(mu)) * tr(Udag(nu), U(nu))
*     + L2 * tr(Udag(mu), U(nu)) * tr(Udag(mu), U(nu))
*     + L3 * tr(Udag(mu), U(mu), Udag(nu), U(nu))
*     + L4 * tr(Udag(mu), U(mu)) * (tr(Udag, chi) + tr(chidag, U))
*     + L5 * (tr(Udag(mu), U(mu), Udag, chi) + tr(Udag(mu), U(mu), chidag, U))
*     + L6 * (tr(Udag, chi) + tr(chidag, U))^2
*     + L7 * (tr(Udag, chi) - tr(chidag, U))^2
*     + L8 * (tr(chidag, U, chidag, U) + tr(Udag, chi, Udag, chi))
*     - i_*L9 * (tr(FR(mu,nu), U(mu), Udag(nu)) + tr(FL(mu,nu), Udag(mu), U(nu)))
*     + L10 * tr(Udag, FR(mu,nu), U, FL(mu,nu))
*     + H1 * (tr(FR(mu,nu), FR(mu,nu)) + tr(FL(mu,nu), FL(mu,nu)))
*     + H2 * tr(chidag, chi)
*** Main building block version
*     + L0 * (tr(u(mu),u(nu),u(mu),u(nu)))
*     + L1 * (tr(u(mu),u(mu))*tr(u(nu),u(nu)))
*     + L2 * (tr(u(mu),u(nu))*tr(u(mu),u(nu)))
*     + L3 * (tr(u(mu),u(mu),u(nu),u(nu)))
*     + L4 * (tr(u(mu),u(mu))*tr(chip))
*     + L5 * (tr(u(mu),u(mu),chip))
*     + L6 * (tr(chip)*tr(chip))
*     + L7 * (tr(chim)*tr(chim))
*     + L8/2 * (tr(chip,chip) + tr(chim,chim))
*     + L9 * ( - tr(u(mu),u(nu),fp(mu,nu))*i_)
*     + L10/4 * (tr(fp(mu,nu),fp(mu,nu)) - tr(fm(mu,nu),fm(mu,nu)))
*     + H1/2 * (tr(fp(mu,nu),fp(mu,nu)) + tr(fm(mu,nu),fm(mu,nu)))
*     + H2/4 * (tr(chip,chip) - tr(chim,chim))
*
* #endif

*     Not assuming tr(f) = 0 (these only give contact terms, and only differ from H2 by tr(Q^2) -> tr(Q)^2)
* #ifdef `TRF'
*     + Lt1 * (tr(fp(mu,nu))*tr(fp(mu,nu)))
*     + Lt2 * (tr(fm(mu,nu))*tr(fm(mu,nu)))
* #endif

