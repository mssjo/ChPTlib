#ifndef `CHPTDIAGRAMFLAVSHF'
#define CHPTDIAGRAMFLAVSHF

* Flavor structures and their associated information
* For use in ChPT_external.hf
* Dynamically generates for any pions,
* handwritten cases cover mixed pion/kaon structures up to 6-point


#ifndef `FLAVS'
    #define FLAVS "`NEXT'"
    #message[flavs]~~~ FLAVS not defined, defaulting via NEXT to `NEXT' (pions only)
#endif
#define CAYHAMID "id,ifmatch->cayham"
#define TRACES "Tr"

********************************************************************************

#switch `FLAVS'
    #case K2
        #define FLAVSK2 "K2"
        #define PKEK2 "k,k"
        #define cayhamK2 ""
        #define SrelK2 "id S2=-S1;"

        #break

    #case 1K2
        #define FLAVS1K2 "1K2"
        #define PKEK2 "p,k,k"
        #define cayham1K2 ""
        #define Srel1K2 "id S2=-S1;"

        #break

    #case 2K2
        #define FLAVS2K2 "2K2"
        #define PKE2K2 "p,p,k,k"
        #define cayham2K2 "
            `CAYHAMID' Tr(f1?pflav,f2?pflav)*Tr(F1?kflav,F2?kflav)=Tr(ac(f1,f2),F1,F2);"

        #define Tr2K2 "Tr(f1,f2,F1,F2)"
        #define Srel2K2 "id S2=-S1;"

        #break
    #case K4
        #define FLAVSK4 "K4,K2xK2"
        #define PKEK4 "k,k,k,k"

        #define TrK4 "Tr(F1,F2,F3,F4)"
        #define SrelK4 "id S2=-S1; id S3=+S1; id S4=-S1;"

        #define TrK2xK2 "Tr(F1,F2)*Tr(F3,F4)"
        #define SrelK2xK2 "id S2=-S1; id S4=-S3;"

        #break
    #case K4A
*             Version using the Cayley-Hamilton Nf=3 relation
        #define FLAVSK4A "K4A,K2xK2"
        #define PKEK4A "k,k,k,k"

        cfunctions TrS(cyclic), TrA(cyclic);
        #redefine TRACES "`TRACES',TrA"

        #define TrK4A "TrA(F1,F2,F3,F4)"
        #define SrelK4A "id S2=-S1; id S3=+S1; id S4=-S1;"

        #define TrK2xK2 "Tr(F1,F2)*Tr(F3,F4)"
        #define SrelK2xK2 "id S2=-S1; id S4=-S3;"

        #define cayhamK4A "
            id Tr(<F1?kflav>,...,<F4?kflav>) = (TrA(F1,...,F4)-TrA(F4,...,F1) + TrS(F1,...,F4))/2;
            `CAYHAMID' TrS(<F1?kflav>,...,<F4?kflav>) = Tr(F1,F2)*Tr(F3,F4) + Tr(F4,F3)*Tr(F2,F1);"

        #break
    #case 4K2
        #define FLAVS4K2 "4K2,3x1K2"
        #define PKE4K2 "p,p,p,p,k,k"
        #define cayham4K2 "
            `CAYHAMID' Tr(F1?kflav,F2?kflav)*Tr(<f1?pflav>,...,<f4?pflav>) = Tr(F1,F2)*(
                Tr(f1,f2)*Tr(f3,f4) - Tr(f1,f3)*Tr(f2,f4) + Tr(f1,f4)*Tr(f2,f3))/2;
            `CAYHAMID' Tr(f1?pflav,f2?pflav)*Tr(f3?pflav,f4?pflav)*Tr(F1?kflav,F2?kflav) = Tr(f1,f2)*Tr(ac(f3,f4),F1,F2);
            `CAYHAMID' Tr(f1?pflav,f2?pflav)*Tr(f3?pflav,f4?pflav,F1?kflav,F2?kflav) = Tr(ac(f1,f2),f3,f4,F1,F2);"

        #define Tr4K2 "Tr(f1,f2,f3,f4,F1,F2)"
        #define Srel4K2 "id S2=-S1;"

        #define Tr3x1K2 "Tr(f1,f2,f3)*Tr(f4,F1,F2)"
        #define Srel3x1K2 "id S2=-S1;"

        #break
    #case 2K4
        #define FLAVS2K4 "2K4,1K21K2,K2x2K2,1K2x1K2"
        #define PKE2K4 "p,p,k,k,k,k"
        #define cayham2K4 "
            id Tr(f1?pflav,f2?pflav)*Tr(<F1?kflav>,...,<F4?kflav>) = Tr(ac(f1,f2),F1,...,F4);"

        #define Tr2K4 "Tr(f1,f2,F1,F2,F3,F4)"
        #define Srel2K4 "id S2=-S1; id S3=+S1; id S4=-S1;"

        #define Tr1K21K2 "Tr(f1,F1,F2,f2,F3,F4)"
        #define Srel1K21K2 "id S2=-S1; id S3=+S1; id S4=-S1;"

        #define TrK2x2K2 "Tr(F1,F2)*Tr(f1,f2,F3,F4)"
        #define SrelK2x2K2 "id S2=-S1; id S4=-S3;"

        #define Tr1K2x1K2 "Tr(f1,F1,F2)*Tr(f2,F3,F4)"
        #define Srel1K2x1K2 "id S2=-S1; id S4=-S3;"

        #break
    #case K6
        #define FLAVSK6 "K6,K2xK4,K2xK2xK2"
        #define PKEK6 "k,k,k,k,k,k"
        #define cayhamK6 ""

        #define TrK6 "Tr(F1,F2,F3,F4,F5,F6)"
        #define SrelK6 "id S2=-S1; id S3=+S1; id S4=-S1; id S5=+S1; id S6=-S1;"

        #define TrK2xK4 "Tr(F1,F2)*Tr(F3,F4,F5,F6)"
        #define SrelK2xK4 "id S2=-S1; id S4=-S3; id S5=+S3; id S6=-S3;"

        #define TrK2xK2xK2 "Tr(F1,F2)*Tr(F3,F4)*Tr(F5,F6)"
        #define SrelK2xK2xK2 "id S2=-S1; id S4=-S3; id S6=-S5;"
        #break

    #default
        #ifndef `FLAVS`FLAVS''
            #message[flavs]~~~ Generating flavor structures for FLAVS=`FLAVS'

            #include- names.hf
            #define FLAVDIR "`CHPTDIR'/flavs"

            #if (`NF'==2) || (isdefined(PKEMASS))
                #define FLAVFILE "`FLAVDIR'/flav`FLAVS'.hf"
            #else
                #define FLAVFILE "`FLAVDIR'/flav`FLAVS'_SUN.hf"
            #endif

            #system cd `FLAVDIR'/.. && pwd && echo "`MAKECMD' NM=`NEXT' `FLAVFILE'" && `MAKECMD' NM=`NEXT' `FLAVFILE'
            #include- `FLAVFILE'
        #endif
    #endswitch
