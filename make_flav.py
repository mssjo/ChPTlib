from textwrap import dedent
from datetime import datetime
import sys

from ipart import opart

# NOTE: this could be done in the FORM preprocessor, but it would be clumsy.
#  This is, among many things, due to the lack of the str.join(...) function.

try:
    N = int(sys.argv[1])
except ValueError:
    print(f"ERROR: Attempting to generate flavor structure when FLAV={sys.argv[1]} is not a simple number of pions")
    sys.exit(1)

structs = {}
cayham = []

def form(trace, wildcard=''):
    return ','.join(f'f{b}{wildcard}' for b in trace)

def try_cayham(R, traces, cayham):
    breakup = 0
    for i,r in reversed(list(enumerate(R))):
        if r == 2:
            cayham.append(f"""`CAYHAMID' {
                    '*'.join(f"Tr({form(trace,'?')})" for trace in traces)
                } = {
                    '*'.join(
                          [f"Tr({form(trace)})" for trace in traces[:i] + traces[i+1:-1]]
                        + [f"Tr(ac({form(traces[i])}),{form(traces[-1])})"])
                };""")
            return True
        if r > 2 and not r % 2:
            breakup += 1
            if breakup == 2:
                cayham.append(f"""`CAYHAMID' {
                        '*'.join(f"Tr({form(trace,'?')})" for trace in traces)
                    } = {
                        '*'.join(f"(Tr{form(trace,'?')})" for trace in traces[:i] + traces[i+1:])
                    }*({
                        ''.join(f"{'-' if j%2 else '+'}Tr({traces[i][0]},{traces[i][j]})*Tr({','.join(traces[i][1:j] + traces[j+1:])})")
                    })/2;""")
                return True
    return False

for R in opart(N, lambda x: x>1):
    R.reverse()

    traces = []
    idx = 1
    for p in R:
        traces.append(list(range(idx, idx+p)))
        idx += p

    if try_cayham(R, traces, cayham):
        continue

    tag = 'x'.join(str(p) for p in R)
    structs[tag] = '*'.join(f"Tr({form(trace)})" for trace in traces)

endl = '\n        '
with open(f"flavs/flav{N}.hf", 'w') as out:
    print(dedent(f"""\
        * Generated by make_flav.py on {datetime.now().strftime('%c')}
        #define FLAVS{N} "{','.join(structs.keys())}"
        #define PKE{N} "{','.join(['p'] * N)}"
        {endl.join(f'#define Tr{tag} "{struct}"' for tag,struct in structs.items())}
        {f'#define cayham{N} "{endl}{f"{endl}    ".join(reversed(cayham))}"' if cayham else ''}
        #define Srel{N} ""
        """), file=out)
