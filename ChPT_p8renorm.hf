
* NNNLO renormalization
* Just a placeholder while awaiting the explicit gammamas
* Splitting into constant and LEC-dependent parts like at NNLO will probably make sense

#procedure renormN3LO(LEC,GAMMA1,GAMMA2,GAMMA3)
    #ifdef `CHANGEMU'
        #ifdef `QRENORM'
            id `LEC'q = `LEC'q
                - 9/16 * (`GAMMA3') * (`CHANGEMU')^3
                - 9/8  * (`GAMMA2') * (`CHANGEMU')^2
                - 3/2  * (`GAMMA1') * (`CHANGEMU');
        #else
            id `LEC'r = `LEC'r
                - kappa^3 * 9/16 * (`GAMMA3') * (`CHANGEMU')^3
                - kappa^3 * 9/8  * (`GAMMA2') * (`CHANGEMU')^2
                - kappa^3 * 3/2  * (`GAMMA1') * (`CHANGEMU');
        #endif
    #else
        id `LEC' = [(cmu)^(d-4)]^3/F^4 * (`LEC'r
            - (`GAMMA3') * Lambda^3
            - (`GAMMA2') * kappa * Lambda^2
            - (`GAMMA1') * kappa^2 * Lambda
            );
    #endif
#endprocedure

.sort
#ifdef `NFGENERAL'
    #do I=1,1862
        symbols Gamma1x`I',Gamma2x`I',Gamma3x`I';
    #enddo
    #do I=1,1862
        #call renormN3LO(K8x`I',Gamma1x`I',Gamma2x`I',Gamma3x`I')
    #enddo
#elseif `NF'==3
    #do I=1,1254
        symbols Gamma1x`I',Gamma2x`I',Gamma3x`I';
    #enddo
    #do I=1,1254
        #call renormN3LO(C8x`I',Gamma1x`I',Gamma2x`I',Gamma3x`I')
    #enddo
#elseif `NF'==2
    #do I=1,475
        symbols gamma1x`I',gamma2x`I',gamma3x`I';
    #enddo
    #do I=1,475
        #call renormN3LO(c8x`I',gamma1x`I',gamma2x`I',gamma3x`I')
    #enddo
#endif
.sort:>>renorm N3LO<<;
