#ifndef `CHPTDIAGRAMVERTEXHF'
#define CHPTDIAGRAMVERTEXHF

* Procedures related to specifying vertices

#include- ChPTdiagram_defs.hf

********************************************************************************

#procedure doderivs()
    argument derivs;
        repeat id sum(p?,q?, ?q) = sum(p+q, ?q);
        id sum(p?) = p;
    endargument;
    repeat id derivs(q?, ?lz, mu?) = i_*q(mu) * derivs(q, ?lz);
    id derivs(q?) = 1;
#endprocedure

* Backward compatibility with older generated code
#procedure barevertex(ID,NM,NV,NP)
    #message[vertex]~~~ WARNING: barevertex is deprecated; use makevertex instead
    #call makevertex(`ID',`NM',`NV',`NP')
#endprocedure

#procedure makevertex(ID,NM,NV,NP)

    #if `ORDER' < `NP'
*         Ignore vertices of too high order
        #message[makevertex]~~~ vertex `ID' omitted: NP=`NP' higher than ORDER=`ORDER'
        local vert`ID' = 0;
        .sort:>>barevertex: `ID'<<;
    #else
        .sort

        #if `NP'==LO
            #define NP "2"
        #elseif `NP'==NLO
            #define NP "4"
        #elseif `NP'==NNLO || `NP'==N2LO
            #define NP "6"
        #elseif `NP'==NNNLO || `NP'==N3LO
            #define NP "8"
        #endif

        #define NX "{`NM'+`NV'}"

        #ifndef `EXTENDFLAV'
            #define EXTENDFLAV "`NEXT'"
        #endif
        #if `EXTENDFLAV'<`NM'
            indices <f{`EXTENDFLAV'+1}=Nf>,...,<f`NM'=Nf>;
            #redefine EXTENDFLAV "`NM'"
        #endif

        indices <i`ID'1>,...,<i`ID'`NX'>;
        indices <f`ID'1>,...,<f`ID'`NM'>;
        set f`ID'x: <f`ID'1>,...,<f`ID'`NM'>;

        indices <mu`ID'1>,...,<mu`ID'`NP'>;
        set mu`ID'x: <mu`ID'1>,...,<mu`ID'`NP'>;

        vectors <p`ID'1>,...,<p`ID'`NX'>;
        set p`ID'x: <p`ID'1>,...,<p`ID'`NX'>;

        skip;

        #include names.hf

        local vert`ID' =
            #ifdef `SQED'
                #call SQEDvertex(`ID',`NM',`NV',`NP')
            #else
                #system cd `VERTEXDIR'/.. && pwd && echo "`MAKECMD' `VERTEXFILE'" && `MAKECMD' `VERTEXFILE'
                #message[makevertex]~~~ importing `VERTEXFILE'
                #include- `VERTEXFILE'
                ;
            #endif

        multiply replace_(<lorentz[1],mu`ID'x[1]>,...,<lorentz[`NP'],mu`ID'x[`NP']>);
        #if `NM'>0
            multiply replace_(<f1,f`ID'1>,...,<f`NM',f`ID'`NM'>);
        #endif

        bracket Tr;
        print +s;
        .sort:>>makevertex: `ID'<<;
    #endif

#endprocedure

#procedure SQEDvertex(ID,NM,NV,NP)
    #if (`NM'==2) && (`NV'==2)
        e^2 * A(mu`ID'1)*A(mu`ID'1) * phi(f`ID'1)*phi(f`ID'2) * delEE(`NP')
    #elseif (`NM'==2) && (`NV'==1)
        -i_*e * (phi(f`ID'1, mu`ID'1)*phi(f`ID'2) - phi(f`ID'1)*phi(f`ID'2, mu`ID'1)) * A(mu`ID'1)  * delE(`NP')
    #elseif (`NM'==4) && (`NV'==0)
        -i_*lambda/fac_(4) * <phi(f`ID'1)>*...*<phi(f`ID'4)> * delL(`NP')
    #elseif (`NM'==2) && (`NV'==0)
        i_*(phi(f`ID'1,mu`ID'1)*phi(f`ID'2,mu`ID'1) * delZ(`NP') - phi(f`ID'1)*phi(f`ID'2) * delM(`NP'))
    #elseif (`NM'==0) && (`NV'==2)
        -i_*(A(mu`ID'1,mu`ID'2)*A(mu`ID'1,mu`ID'2) - A(mu`ID'1,mu`ID'2)*A(mu`ID'2,mu`ID'1)) * delA(`NP')
    #else
        0
    #endif

*     One SQED tensor holds the indices of phi, the other those of phi*
*      (doesn't matter which is which).
*     This is to enforce that all contractions are phi-phi* rather than
*      phi-phi or phi*-phi*.
    #if (`NM'>0)
        * SQEDphi(<f`ID'1>,...,<f`ID'{`NM'/2}>)
        * SQEDdag(<f`ID'{`NM'/2+1}>,...,<f`ID'`NM'>)
    #endif

    ;

*     SQED renormalization: each counterterm is viewed as a series del(2)+del(4)+... where each cancels
*     divergences at the loop level of the corresponding ChPT power counting order.
*     id delEE(2) = 1;
*     id delEE(n?) = sum_(m,2,n-2,2, delE(m)*delE(n-m));
    id delZ?{delZ,delM,delA}(2) = 0;
    id delZ?{delE,delEE,delL}(2) = 1;
#endprocedure
